<project name="Sample usage of Salesforce Ant tasks" default="test" basedir="." xmlns:sf="antlib:com.salesforce">

  <property file="properties/sf.properties"/>
  <property environment="env"/>

  <!-- Setting default value for username, password and session id properties to empty string
       so unset values are treated as empty. Without this, ant expressions such as ${sf.username}
       will be treated literally.
  -->
  <condition property="sf.username" value="">
    <not>
      <isset property="sf.username"/>
    </not>
  </condition>
  <condition property="sf.password" value="">
    <not>
      <isset property="sf.password"/>
    </not>
  </condition>
  <condition property="sf.sessionId" value="">
    <not>
      <isset property="sf.sessionId"/>
    </not>
  </condition>

  <taskdef resource="com/salesforce/antlib.xml" uri="antlib:com.salesforce">
    <classpath>
      <pathelement location="ant-salesforce/ant-salesforce.jar"/>
    </classpath>
  </taskdef>

  <!-- Retrieve an unpackaged set of metadata from your org -->
  <!-- The file unpackaged/package.xml lists what is to be retrieved -->
  <target name="retrieveUnpackaged">
    <mkdir dir="retrieveUnpackaged"/>
    <!-- Retrieve the contents into another directory -->
    <sf:retrieve username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}"
                 serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" retrieveTarget="retrieveUnpackaged"
                 unpackaged="unpackaged/package.xml"/>
  </target>

  <!-- Deploy the unpackaged set of metadata retrieved with retrieveUnpackaged and run tests in this organization's namespace only-->
  <target name="deployUnpackaged">
    <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}"
               serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="retrieveUnpackaged"
               rollbackOnError="true"/>
  </target>

  <!-- Deploy a zip of metadata files to the org -->
  <target name="deployZip">
    <echo message="*************Creating ${sf.zipFile} *******************************************"/>
    <zip destfile="${sf.zipFile}">
      <fileset dir="artifacts/src">
        <include name="**/classes/*"/>
        <include name="**/triggers/**"/>
        <include name="**/pages/*"/>
        <include name="**/components/**"/>
        <include name="package.xml"/>
      </fileset>
    </zip>
    <echo message="*************Deploying ${sf.zipFile} *******************************************"/>
    <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}"
               serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" zipFile="${sf.zipFile}" pollWaitMillis="1000"
               rollbackOnError="true"/>
  </target>

  <!-- Shows deploying code & running tests for code in directory -->
  <target name="deployCode">
    <!-- Upload the contents of the "codepkg" directory, running the tests for just 1 class -->
    <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}"
               serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="codepkg" testLevel="RunSpecifiedTests"
               rollbackOnError="true">
      <runTest>SampleDeployClass</runTest>
    </sf:deploy>
  </target>

  <!-- Shows retrieving code; only succeeds if done after deployCode -->
  <target name="retrieveCode">
    <!-- Retrieve the contents listed in the file codepkg/package.xml into the codepkg directory -->
    <sf:retrieve username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}"
                 serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" retrieveTarget="codepkg"
                 unpackaged="codepkg/package.xml"/>
  </target>

  <target name="createBackup">
    <mkdir dir="${sf.backupLocation}"/>
    <sf:retrieve username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}"
                 serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" retrieveTarget="${sf.backupLocation}"
                 unzip="false" unpackaged="../src/package.xml"/>
  </target>

  <!-- Shows check only; never actually saves to the server -->
  <target name="deployCodeCheckOnly">
    <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}"
               serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="codepkg" checkOnly="true"/>
  </target>

  <target name="productionValidation">
    <echo message="*************Creating ${sf.zipFile} *******************************************"/>
    <zip destfile="${sf.zipFile}">
      <fileset dir="artifacts/src">
        <include name="**/classes/*"/>
        <include name="**/triggers/**"/>
        <include name="**/pages/*"/>
        <include name="**/components/**"/>
        <include name="package.xml"/>
      </fileset>
    </zip>
    <record name="log.txt" action="start" />
    <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}"
               serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" zipFile="${sf.zipFile}"
               checkOnly="true" testLevel="RunLocalTests"/>
    <record name="log.txt" action="stop" />
    <loadfile srcFile="../log.txt" property="deployId">
      <filterchain>
        <headfilter lines="2"/>
        <tokenfilter>
          <stringtokenizer suppressdelims="true"/>
          <containsregex pattern="[a-zA-Z0-9]{18}"/>
        </tokenfilter>
      </filterchain>
    </loadfile>
    <propertyfile file="properties/sf.properties">
      <entry key="sf.validationId" value="${deployId}"/>
    </propertyfile>
  </target>

  <!-- Shows quick deployment of recent validation. Set the property sf.recentValidationId to your recent check only deployment Id -->
  <target name="quickDeploy">
    <sf:deployRecentValidation username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}"
                               serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}"
                               recentValidationId="${sf.validationId}"/>
  </target>
</project>
